#include "heat-2d_kernel.hu"
__global__ void kernel0(double *A, int T, int c0)
{
    int b0 = blockIdx.y, b1 = blockIdx.x;
    int t0 = threadIdx.y, t1 = threadIdx.x;
    double private_A_0[1][1][2];

    #define floord(n,d) (((n)<0) ? -((-(n)+(d)-1)/(d)) : (n)/(d))
    if (32 * b0 + t0 >= 1 && 32 * b0 + t0 <= 4000 && 32 * b1 + t1 <= 4000) {
      if (32 * b1 + t1 >= 1)
        private_A_0[0][0][0] = (((0.125 * ((A[((c0 % 2) * 4002 + (32 * b0 + t0 + 1)) * 4002 + (32 * b1 + t1)] - (2.0 * A[((c0 % 2) * 4002 + (32 * b0 + t0)) * 4002 + (32 * b1 + t1)])) + A[((c0 % 2) * 4002 + (32 * b0 + t0 - 1)) * 4002 + (32 * b1 + t1)])) + (0.125 * ((A[((c0 % 2) * 4002 + (32 * b0 + t0)) * 4002 + (32 * b1 + t1 + 1)] - (2.0 * A[((c0 % 2) * 4002 + (32 * b0 + t0)) * 4002 + (32 * b1 + t1)])) + A[((c0 % 2) * 4002 + (32 * b0 + t0)) * 4002 + (32 * b1 + t1 - 1)]))) + A[((c0 % 2) * 4002 + (32 * b0 + t0)) * 4002 + (32 * b1 + t1)]);
      if (32 * b1 + t1 <= 3984)
        private_A_0[0][0][1] = (((0.125 * ((A[((c0 % 2) * 4002 + (32 * b0 + t0 + 1)) * 4002 + (32 * b1 + t1 + 16)] - (2.0 * A[((c0 % 2) * 4002 + (32 * b0 + t0)) * 4002 + (32 * b1 + t1 + 16)])) + A[((c0 % 2) * 4002 + (32 * b0 + t0 - 1)) * 4002 + (32 * b1 + t1 + 16)])) + (0.125 * ((A[((c0 % 2) * 4002 + (32 * b0 + t0)) * 4002 + (32 * b1 + t1 + 17)] - (2.0 * A[((c0 % 2) * 4002 + (32 * b0 + t0)) * 4002 + (32 * b1 + t1 + 16)])) + A[((c0 % 2) * 4002 + (32 * b0 + t0)) * 4002 + (32 * b1 + t1 + 15)]))) + A[((c0 % 2) * 4002 + (32 * b0 + t0)) * 4002 + (32 * b1 + t1 + 16)]);
      if (32 * b1 + t1 >= 1)
        A[((-(c0 % 2) + 1) * 4002 + (32 * b0 + t0)) * 4002 + (32 * b1 + t1)] = private_A_0[0][0][0];
      if (32 * b1 + t1 <= 3984)
        A[((-(c0 % 2) + 1) * 4002 + (32 * b0 + t0)) * 4002 + (32 * b1 + t1 + 16)] = private_A_0[0][0][1];
    }
}
